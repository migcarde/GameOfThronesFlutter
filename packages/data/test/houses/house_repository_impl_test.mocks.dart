// Mocks generated by Mockito 5.0.3 from annotations
// in data/test/houses/house_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:connectivity/connectivity.dart' as _i3;
import 'package:data/network_manager.dart' as _i7;
import 'package:data/operations/houses/house_remote_data_source.dart' as _i4;
import 'package:data/operations/houses/house_response.dart' as _i6;
import 'package:data/operations/houses/house_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeHouseService extends _i1.Fake implements _i2.HouseService {}

class _FakeConnectivity extends _i1.Fake implements _i3.Connectivity {}

/// A class which mocks [HouseRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHouseRemoteDataSource extends _i1.Mock
    implements _i4.HouseRemoteDataSource {
  MockHouseRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HouseService get houseService =>
      (super.noSuchMethod(Invocation.getter(#houseService),
          returnValue: _FakeHouseService()) as _i2.HouseService);
  @override
  set houseService(_i2.HouseService? _houseService) =>
      super.noSuchMethod(Invocation.setter(#houseService, _houseService),
          returnValueForMissingStub: null);
  @override
  _i5.Future<List<_i6.HouseResponse>> getHouses(int? type) =>
      (super.noSuchMethod(Invocation.method(#getHouses, [type]),
              returnValue: Future.value(<_i6.HouseResponse>[]))
          as _i5.Future<List<_i6.HouseResponse>>);
}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i7.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Connectivity get connectivity =>
      (super.noSuchMethod(Invocation.getter(#connectivity),
          returnValue: _FakeConnectivity()) as _i3.Connectivity);
  @override
  set connectivity(_i3.Connectivity? _connectivity) =>
      super.noSuchMethod(Invocation.setter(#connectivity, _connectivity),
          returnValueForMissingStub: null);
  @override
  _i5.Future<bool> get hasInternetConnection =>
      (super.noSuchMethod(Invocation.getter(#hasInternetConnection),
          returnValue: Future.value(false)) as _i5.Future<bool>);
}
